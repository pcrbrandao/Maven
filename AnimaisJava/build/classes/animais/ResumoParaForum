public abstract class Ave implements Bicho {
    
    private String voa, nada, 
            grito, atributos, nomeDaAve;
    
    public Ave(String v, String n, String g) {
        voa = v;
        nada = n;
        grito = g;
        nomeDaAve = this.getClass().getName();
        atributos = String.format("%s: Eu vôo? %s, nado? %s, Grito? %s", 
                nomeDaAve, voa, nada, grito);
    }
}

public class Torturator {
    public String aperta(Bicho bicho) {
        return bicho.grite();
    }
}

public interface Bicho {
    String grite();
}

public class Animais {
    
    public static void main(String[] args) {
        
        Bicho umBichoQualquer;
        Torturator torturator = new Torturator();
        
        umBichoQualquer = new Galinha("não", "não","Có!");
        String som = torturator.aperta(umBichoQualquer);
        System.out.println(som);
        umBichoQualquer = new Pato("sim", "sim", "Qua!!!");
        som = torturator.aperta(umBichoQualquer);
        System.out.println(som);
    }
}

public class Pato extends Ave {
    
    public Pato(String v, String n, String g) {
        super(v, n, g);
    }
    
    @Override
    public String grite() {
        return getAtributos();
    }
}

public class Galinha extends Ave { 
    
    public Galinha(String v, String n, String g) {
        /**
         * A superclasse não tem um construtor sem argumentos
         * então eu tenho que chamar o que tem aqui
         */
        super(v, n, g);
    }
    
    @Override
    public String grite() {
        return getAtributos();
    }
}

Com uma classe de associação, que fará o relacionamento entre as duas quando
 as informações que se desejam só existem quando existe o relacionamento e 
não podem ser armazenadas em nenhuma das classes que se relacionam. 
Exemplo: Receita e Ingrediente; não é adequado armazenar os ingredientes
 dentro da Receita, pois a Receita pode conter diferentes Ingredientes 
em quantidades diferentes. Para resolver, criamos uma classe Receita_Ingrediente
 que conterá essas informações.